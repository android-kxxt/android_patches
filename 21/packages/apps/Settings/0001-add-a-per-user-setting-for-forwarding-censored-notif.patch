From 3662750289a5ad0e36c4b1b18f0e62d0c3dc22a3 Mon Sep 17 00:00:00 2001
From: June <june@eridan.me>
Date: Wed, 16 Mar 2022 07:09:46 +0200
Subject: [PATCH] add a per-user setting for forwarding censored notifs

Change-Id: I38e4eb1f746a3dc9aeb5d4afdd5adc67194dae9d
Signed-off-by: June <june@eridan.me>
Co-authored-by: inthewaves <inthewaves@pm.me>
Co-authored-by: June <june@eridan.me>
---
 res/values/strings.xml                        |  2 +
 res/xml/user_settings.xml                     |  6 ++
 ...ionsToCurrentUserPreferenceController.java | 60 +++++++++++++++++++
 .../android/settings/users/UserSettings.java  | 20 +++++++
 4 files changed, 88 insertions(+)
 create mode 100644 src/com/android/settings/users/SendCensoredNotificationsToCurrentUserPreferenceController.java

diff --git a/res/values/strings.xml b/res/values/strings.xml
index d44721cf4f2..d1cd1cf6876 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -12310,4 +12310,6 @@
 
     <!-- Warning message when we try to dock an app not supporting multiple instances split into multiple sides [CHAR LIMIT=NONE] -->
     <string name="dock_multi_instances_not_supported_text">"This app can only be opened in 1 window"</string>
+    <string name="user_settings_send_censored_notifications_to_current">Send notifications to current user</string>
+    <string name="user_settings_send_censored_notifications_to_current_summary">Your lock screen notifications will be forwarded to the current user if you are active in the background. Only the user\'s name, the app\'s name, and the time received will be shown.</string>
 </resources>
diff --git a/res/xml/user_settings.xml b/res/xml/user_settings.xml
index 59217226592..6c7ac2c091a 100644
--- a/res/xml/user_settings.xml
+++ b/res/xml/user_settings.xml
@@ -100,4 +100,10 @@
         android:fragment="com.android.settings.users.TimeoutToDockUserSettings"
         settings:controller="com.android.settings.users.TimeoutToDockUserPreferenceController"/>
 
+    <SwitchPreference
+            android:key="user_settings_send_censored_notifications_to_current"
+            android:title="@string/user_settings_send_censored_notifications_to_current"
+            android:summary="@string/user_settings_send_censored_notifications_to_current_summary"
+            android:order="106"/>
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/users/SendCensoredNotificationsToCurrentUserPreferenceController.java b/src/com/android/settings/users/SendCensoredNotificationsToCurrentUserPreferenceController.java
new file mode 100644
index 00000000000..637d7bbb782
--- /dev/null
+++ b/src/com/android/settings/users/SendCensoredNotificationsToCurrentUserPreferenceController.java
@@ -0,0 +1,60 @@
+package com.android.settings.users;
+
+import android.content.Context;
+import android.provider.Settings;
+import android.widget.Toast;
+
+import androidx.annotation.VisibleForTesting;
+import androidx.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.core.TogglePreferenceController;
+
+public class SendCensoredNotificationsToCurrentUserPreferenceController
+        extends TogglePreferenceController {
+    private final UserCapabilities mUserCaps;
+
+    public SendCensoredNotificationsToCurrentUserPreferenceController(Context context, String key) {
+        super(context, key);
+        mUserCaps = UserCapabilities.create(context);
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+        mUserCaps.updateAddUserCapabilities(mContext);
+        if (!isAvailable()) {
+            preference.setVisible(false);
+        } else {
+            preference.setVisible(mUserCaps.mUserSwitcherEnabled);
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mUserCaps.mUserSwitcherEnabled ? AVAILABLE : CONDITIONALLY_UNAVAILABLE;
+    }
+
+    @Override
+    public boolean isChecked() {
+        return Settings.Secure.getInt(mContext.getContentResolver(),
+                Settings.Secure.SEND_CENSORED_NOTIFICATIONS_TO_CURRENT_USER, 0) != 0;
+    }
+
+    @Override
+    public boolean setChecked(boolean isChecked) {
+        return Settings.Secure.putInt(mContext.getContentResolver(),
+                Settings.Secure.SEND_CENSORED_NOTIFICATIONS_TO_CURRENT_USER, isChecked ? 1 : 0);
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        return mContext.getString(
+                R.string.user_settings_send_censored_notifications_to_current_summary);
+    }
+
+    @Override
+    public int getSliceHighlightMenuRes() {
+        return R.string.menu_key_system;
+    }
+}
diff --git a/src/com/android/settings/users/UserSettings.java b/src/com/android/settings/users/UserSettings.java
index b0816fdf4ad..4d5db7acc46 100644
--- a/src/com/android/settings/users/UserSettings.java
+++ b/src/com/android/settings/users/UserSettings.java
@@ -137,6 +137,8 @@ public class UserSettings extends SettingsPreferenceFragment
     private static final String KEY_REMOVE_GUEST_ON_EXIT = "remove_guest_on_exit";
     private static final String KEY_GUEST_USER_CATEGORY = "guest_user_category";
     private static final String KEY_ALLOW_MULTIPLE_USERS = "allow_multiple_users";
+    private static final String KEY_SEND_CENSORED_NOTIFICATIONS =
+            "user_settings_send_censored_notifications_to_current";
 
     private static final String SETTING_GUEST_HAS_LOGGED_IN = "systemui.guest_has_logged_in";
 
@@ -225,6 +227,7 @@ public class UserSettings extends SettingsPreferenceFragment
     private AddUserWhenLockedPreferenceController mAddUserWhenLockedPreferenceController;
     private GuestTelephonyPreferenceController mGuestTelephonyPreferenceController;
     private RemoveGuestOnExitPreferenceController mRemoveGuestOnExitPreferenceController;
+    private SendCensoredNotificationsToCurrentUserPreferenceController mSendCensoredNotificationsToCurrentUserPreferenceController;
     private MultiUserTopIntroPreferenceController mMultiUserTopIntroPreferenceController;
     private TimeoutToDockUserPreferenceController mTimeoutToDockUserPreferenceController;
     private UserCreatingDialog mUserCreatingDialog;
@@ -322,6 +325,10 @@ public class UserSettings extends SettingsPreferenceFragment
         mRemoveGuestOnExitPreferenceController = new RemoveGuestOnExitPreferenceController(
                 activity, KEY_REMOVE_GUEST_ON_EXIT, this, mHandler);
 
+        mSendCensoredNotificationsToCurrentUserPreferenceController =
+                new SendCensoredNotificationsToCurrentUserPreferenceController(activity,
+                        KEY_SEND_CENSORED_NOTIFICATIONS);
+
         mMultiUserTopIntroPreferenceController = new MultiUserTopIntroPreferenceController(activity,
                 KEY_MULTIUSER_TOP_INTRO);
 
@@ -332,11 +339,14 @@ public class UserSettings extends SettingsPreferenceFragment
         mAddUserWhenLockedPreferenceController.displayPreference(screen);
         mGuestTelephonyPreferenceController.displayPreference(screen);
         mRemoveGuestOnExitPreferenceController.displayPreference(screen);
+        mSendCensoredNotificationsToCurrentUserPreferenceController.displayPreference(screen);
         mMultiUserTopIntroPreferenceController.displayPreference(screen);
         mTimeoutToDockUserPreferenceController.displayPreference(screen);
 
         screen.findPreference(mAddUserWhenLockedPreferenceController.getPreferenceKey())
                 .setOnPreferenceChangeListener(mAddUserWhenLockedPreferenceController);
+        screen.findPreference(mSendCensoredNotificationsToCurrentUserPreferenceController.getPreferenceKey())
+                .setOnPreferenceChangeListener(mSendCensoredNotificationsToCurrentUserPreferenceController);
 
         screen.findPreference(mGuestTelephonyPreferenceController.getPreferenceKey())
                 .setOnPreferenceChangeListener(mGuestTelephonyPreferenceController);
@@ -420,6 +430,9 @@ public class UserSettings extends SettingsPreferenceFragment
                 mTimeoutToDockUserPreferenceController.getPreferenceKey()));
         mRemoveGuestOnExitPreferenceController.updateState(screen.findPreference(
                 mRemoveGuestOnExitPreferenceController.getPreferenceKey()));
+        mSendCensoredNotificationsToCurrentUserPreferenceController.updateState(screen.findPreference(
+                mSendCensoredNotificationsToCurrentUserPreferenceController.getPreferenceKey()));
+
         if (mShouldUpdateUserList) {
             updateUI();
         }
@@ -1302,10 +1315,15 @@ public class UserSettings extends SettingsPreferenceFragment
         final Preference guestCallPreference = getPreferenceScreen().findPreference(
                 mGuestTelephonyPreferenceController.getPreferenceKey());
         mGuestTelephonyPreferenceController.updateState(guestCallPreference);
+        final Preference sendCensoredNotifs = getPreferenceScreen().findPreference(
+                mSendCensoredNotificationsToCurrentUserPreferenceController.getPreferenceKey());
 
         final Preference multiUserTopIntroPreference = getPreferenceScreen().findPreference(
                 mMultiUserTopIntroPreferenceController.getPreferenceKey());
+
+        mSendCensoredNotificationsToCurrentUserPreferenceController.updateState(sendCensoredNotifs);
         mMultiUserTopIntroPreferenceController.updateState(multiUserTopIntroPreference);
+        mUserListCategory.setVisible(mUserCaps.mUserSwitcherEnabled);
         updateGuestPreferences();
         updateGuestCategory(context, users);
         updateAddUser(context);
@@ -1744,6 +1762,8 @@ public class UserSettings extends SettingsPreferenceFragment
                             new AddUserWhenLockedPreferenceController(
                                     context, KEY_ADD_USER_WHEN_LOCKED);
                     controller.updateNonIndexableKeys(niks);
+                    new SendCensoredNotificationsToCurrentUserPreferenceController(context,
+                            KEY_SEND_CENSORED_NOTIFICATIONS).updateNonIndexableKeys(niks);
                     new AutoSyncDataPreferenceController(context, null /* parent */)
                             .updateNonIndexableKeys(niks);
                     new AutoSyncPersonalDataPreferenceController(context, null /* parent */)
-- 
2.43.1

