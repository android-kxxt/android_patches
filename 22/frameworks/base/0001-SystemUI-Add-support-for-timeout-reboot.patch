From 51a2cf049f8b9fa7e698a9531cc350f86b0633f1 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Thu, 30 Dec 2021 22:33:02 +0100
Subject: [PATCH] SystemUI: Add support for timeout-reboot

By exploiting the already existing implementation used in Keyguard
to "lock" the device after a specific timeout has been reached
we add our own custom action that starts right when the display
is in the "locked" state and stops when we enter the "exit"
phase of keyguard ( aka unlocked )

Also cancel reboot timeout when unlocking without a secure lock screen.
Add a debugging statement to make this easier to troubleshoot (needs
`adb shell setprop persist.log.tag.Keyguard DEBUG`).

Issue: calyxos#1683
Co-authored-by: Tommy Webb <tommy@calyxinstitute.org>
Change-Id: I23170e5ec3ae296a4aa1d9c1793d61c8399c4d54
---
 data/etc/com.android.systemui.xml             |  1 +
 packages/SystemUI/AndroidManifest.xml         |  2 +
 .../keyguard/KeyguardViewMediator.java        | 60 +++++++++++++++++++
 3 files changed, 63 insertions(+)

diff --git a/data/etc/com.android.systemui.xml b/data/etc/com.android.systemui.xml
index 38ea4ac8d109..46f64e9660dc 100644
--- a/data/etc/com.android.systemui.xml
+++ b/data/etc/com.android.systemui.xml
@@ -86,6 +86,7 @@
         <permission name="android.permission.LOG_COMPAT_CHANGE" />
         <permission name="android.permission.READ_COMPAT_CHANGE_CONFIG" />
         <permission name="android.permission.READ_DEVICE_CONFIG" />
+        <permission name="android.permission.REBOOT" />
         <permission name="android.permission.READ_SAFETY_CENTER_STATUS" />
         <permission name="android.permission.SET_UNRESTRICTED_KEEP_CLEAR_AREAS" />
         <permission name="android.permission.READ_SEARCH_INDEXABLES" />
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 84dbd45270ea..d1964b9196f4 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -381,6 +381,8 @@
     <!-- Listen to (dis-)connection of external displays and enable / disable them. -->
     <uses-permission android:name="android.permission.MANAGE_DISPLAYS" />
 
+    <uses-permission android:name="android.permission.REBOOT" />
+
     <!-- To be able to intercept meta key events, might need to be removed once b/358569822
          is ready -->
     <uses-permission android:name="android.permission.OVERRIDE_SYSTEM_KEY_BEHAVIOR_IN_FOCUSED_WINDOW" />
diff --git a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
index fecd6c8aef8a..54871131d7a7 100644
--- a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
+++ b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
@@ -180,6 +180,8 @@ import com.android.systemui.wallpapers.data.repository.WallpaperRepository;
 import com.android.window.flags.Flags;
 import com.android.wm.shell.keyguard.KeyguardTransitions;
 
+import lineageos.providers.LineageSettings;
+
 import dagger.Lazy;
 
 import kotlinx.coroutines.CoroutineDispatcher;
@@ -250,6 +252,8 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD";
     private static final String DELAYED_LOCK_PROFILE_ACTION =
             "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_LOCK";
+    private static final String DELAYED_REBOOT_ACTION =
+        "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_REBOOT";
 
     private static final String SYSTEMUI_PERMISSION = "com.android.systemui.permission.SELF";
 
@@ -299,6 +303,12 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
      */
     public static final int KEYGUARD_LOCK_AFTER_DELAY_DEFAULT = 5000;
 
+    /**
+     * How long to wait after the screen turns off due to timeout before
+     * rebooting the device.
+     */
+    private static final int KEYGUARD_REBOOT_AFTER_DELAY_DEFAULT = 0;
+
     /**
      * How long we'll wait for the {@link ViewMediatorCallback#keyguardDoneDrawing()}
      * callback before unblocking a call to {@link #setKeyguardEnabled(boolean)}
@@ -426,6 +436,11 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
      */
     private int mDelayedProfileShowingSequence;
 
+    /**
+     * Simiar to {@link #mDelayedProfileShowingSequence}, but it is for automatic reboot.
+     */
+    private int mDelayedRebootSequence;
+
     private final DismissCallbackRegistry mDismissCallbackRegistry;
 
     // the properties of the keyguard
@@ -852,6 +867,9 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         public void keyguardGone() {
             Trace.beginSection("KeyguardViewMediator.mViewMediatorCallback#keyguardGone");
             if (DEBUG) Log.d(TAG, "keyguardGone");
+            synchronized (this) {
+                cancelDoRebootLaterLocked();
+            }
             mKeyguardViewControllerLazy.get().setKeyguardGoingAwayState(false);
             mKeyguardDisplayManager.hide();
             mUpdateMonitor.startBiometricWatchdog();
@@ -1588,6 +1606,7 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         final IntentFilter delayedActionFilter = new IntentFilter();
         delayedActionFilter.addAction(DELAYED_KEYGUARD_ACTION);
         delayedActionFilter.addAction(DELAYED_LOCK_PROFILE_ACTION);
+        delayedActionFilter.addAction(DELAYED_REBOOT_ACTION);
         delayedActionFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
         mContext.registerReceiver(mDelayedLockBroadcastReceiver, delayedActionFilter,
                 SYSTEMUI_PERMISSION, null /* scheduler */,
@@ -1913,6 +1932,17 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         return timeout;
     }
 
+    private long getRebootTimeout() {
+        final ContentResolver cr = mContext.getContentResolver();
+
+        // From Global Settings
+        final long timeout = LineageSettings.Global.getLong(cr,
+                LineageSettings.Global.DEVICE_REBOOT_TIMEOUT,
+                KEYGUARD_REBOOT_AFTER_DELAY_DEFAULT);
+
+        return timeout;
+    }
+
     private void doKeyguardLaterLocked() {
         long timeout = getLockTimeout(mSelectedUserInteractor.getSelectedUserId());
         if (timeout == 0) {
@@ -1972,6 +2002,19 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         }
     }
 
+    private void doRebootLaterLocked(long timeout) {
+        // Reboot in the future
+        long when = mSystemClock.elapsedRealtime() + timeout;
+        Intent intent = new Intent(DELAYED_REBOOT_ACTION);
+        intent.putExtra("seq", mDelayedRebootSequence);
+        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
+        PendingIntent sender = PendingIntent.getBroadcast(mContext,
+                0, intent, PendingIntent.FLAG_CANCEL_CURRENT |  PendingIntent.FLAG_IMMUTABLE);
+        mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);
+        if (DEBUG) Log.d(TAG, "setting alarm to reboot device, seq = "
+                         + mDelayedRebootSequence);
+    }
+
     private void cancelDoKeyguardLaterLocked() {
         mDelayedShowingSequence++;
     }
@@ -1980,6 +2023,12 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
         mDelayedProfileShowingSequence++;
     }
 
+    private void cancelDoRebootLaterLocked() {
+        if (DEBUG) Log.d(TAG, "cancelling alarm to reboot device, seq = "
+                         + mDelayedRebootSequence);
+        mDelayedRebootSequence++;
+    }
+
     /**
      * It will let us know when the device is waking up.
      */
@@ -2413,6 +2462,10 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
 
         if (DEBUG) Log.d(TAG, "doKeyguard: showing the lock screen");
         showKeyguard(options);
+        final long timeout = getRebootTimeout();
+        if (timeout > 0) {
+            doRebootLaterLocked(timeout);
+        }
     }
 
     @SuppressLint("MissingPermission")
@@ -2603,6 +2656,13 @@ public class KeyguardViewMediator implements CoreStartable, Dumpable,
                         }
                     }
                 }
+            } else if (DELAYED_REBOOT_ACTION.equals(intent.getAction())) {
+                final int sequence = intent.getIntExtra("seq", 0);
+                synchronized (KeyguardViewMediator.this) {
+                    if (mDelayedRebootSequence == sequence) {
+                        mContext.getSystemService(PowerManager.class).reboot("RebootTimeout");
+                    }
+                }
             }
         }
     };
-- 
2.49.0

